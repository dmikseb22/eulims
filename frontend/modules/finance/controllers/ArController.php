<?php

namespace frontend\modules\finance\controllers;

use Yii;
use common\models\finance\Billing;
use common\models\finance\BillingSearch;
use frontend\modules\finance\components\models\Ext_Billing;
use common\models\finance\Vwbillingop;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use common\models\finance\OpBilling;
use common\models\finance\Op;
use yii\data\ActiveDataProvider;
use common\components\TableJSON;

/**
 * ArController implements the CRUD actions for Billing model.
 */
class ArController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all Billing models.
     * @return mixed
     */
    public function actionIndex()
    {
        $HTMLJ=new TableJSON();
        $html=<<<HTML
    <table>
<thead>
<tr>
<th>#</th>
<th>Metal</th>
<th>Density</th>
<th>size</th>
</tr>
<thead>
<tr>
<td>1</td>
<td>Gold</td>
<td>0.03</td>
<td>2.3mm
</tr>
<tr>
<td>2</td>
<td>Silver</td>
<td>1.08</td>
<td>3.2mm
</tr>
</table>           
HTML;
        echo $HTMLJ->TableToJSON($html);
        exit;
        $searchModel = new BillingSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Billing model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        if(Yii::$app->request->isAjax){
            return $this->renderAjax('view', [
                'model' => $this->findModel($id),
            ]);
        }else{
            return $this->render('view', [
                'model' => $this->findModel($id),
            ]);
        }
    }
    public function actionGetopgrid($id){
        $query= Op::find()->where(['customer_id'=>$id,'on_account'=>1,'invoice_number'=>NULL]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);
        if(Yii::$app->request->isAjax){
            return $this->renderAjax('_opgrid', ['dataProvider'=>$dataProvider]);
        }
        else{
            return $this->render('_opgrid', ['dataProvider'=>$dataProvider]);
        }
    }
    /**
     * Creates a new Billing model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Ext_Billing();
        if ($model->load(Yii::$app->request->post()) && $model->save(false)) {
            $OpIds=$model->OpIds;
            $billing_id=$model->billing_id;
            $OpArr= explode(",", $OpIds);
            $Success=false;
            $Connection= Yii::$app->financedb;
            // Update orderofpayment
            $sql="UPDATE `tbl_orderofpayment` SET `invoice_number`='$model->invoice_number' WHERE `orderofpayment_id` IN ($OpIds)";
            $Command=$Connection->createCommand($sql);
            $Command->execute();
                
            foreach ($OpArr as $OpId){
                $orderofpayment_id=(int)$OpId;
                // Insert tbl_op_billing
                $OpBilling=new OpBilling();
                $OpBilling->billing_id=$billing_id;
                $OpBilling->orderofpayment_id=$orderofpayment_id;
                $Success=$OpBilling->save();
            }
            Yii::$app->session->setFlash('success', 'Billing Successfully Created!');
            return $this->redirect(['/finance/billing/invoices']);
        } else {
            $model->billing_date=date("Y-m-d");
            $model->due_date=date('Y-m-d', strtotime(date("Y-m-d"). ' + 30 days'));
            $model->user_id= Yii::$app->user->id;
            $model->invoice_number= "<autogenerated>";
            $model->amount=0.00;
            $model->soa_number=NULL;
            //$searchModel = new BillSearch();
            //$dataProvider = $searchModel->search(Yii::$app->request->queryParams);
            $query= Op::find()->where(['customer_id'=>-1,'on_account'=>1]);
            $dataProvider = new ActiveDataProvider([
                'query' => $query,
            ]);
                
            //$dataProvider->pagination->PageSize=2;
            if(Yii::$app->request->isAjax){
                return $this->renderAjax('create', [
                    'model' => $model,
                    'dataProvider' => $dataProvider,
                ]);
            }else{
                 return $this->render('create', [
                    'model' => $model,
                    'dataProvider' => $dataProvider,
                ]);
            }
        }
    }

    /**
     * Updates an existing Billing model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model= Billing::findOne($id);
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            Yii::$app->session->setFlash('success', 'Billing Successfully Created!',true);
            return $this->redirect(['/finance/billing/invoices']);
        } else {
            $query= Vwbillingop::find()->where(['customer_id'=>$model->customer_id,'billing_id'=>$id]);
            $dataProvider = new ActiveDataProvider([
                'query' => $query,
            ]);
            if(Yii::$app->request->isAjax){
                return $this->renderAjax('update', [
                    'model' => $model,
                    'dataProvider' => $dataProvider,
                ]);
            }else{
                return $this->render('update', [
                    'model' => $model,
                    'dataProvider' => $dataProvider,
                ]);
            }
        }
    }

    /**
     * Deletes an existing Billing model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Billing model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Billing the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Billing::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
